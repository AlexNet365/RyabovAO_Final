#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда         
	
#Область ОбработчикиСобытий
	
Функция ПроверкаДатыВДоговореСАбонентскойПлатой();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОбслуживаниеКлиента.Дата КАК Дата,
		|	ДоговорыКонтрагентов.ВКМ_НачалоДействияДоговора КАК ВКМ_НачалоДействияДоговора,
		|	ДоговорыКонтрагентов.ВКМ_КонецДействияДоговора КАК ВКМ_КонецДействияДоговора
		|ИЗ
		|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВКМ_ОбслуживаниеКлиента.Договор = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл   
		
		Если Выборка.Дата > Выборка.ВКМ_КонецДействияДоговора ИЛИ Выборка.Дата < Выборка.ВКМ_НачалоДействияДоговора Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;    
		
	КонецЦикла;
	
КонецФункции

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Проверка правильности попадания даты в случае, если вид договора - абонентская плата 
	Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскаяПлата Тогда
		Если ПроверкаДатыВДоговореСАбонентскойПлатой() = Ложь Тогда
			Отказ = Истина; 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Данный документ не будет проведен, потому что дата его проведения не попадает в интервал действия договора %1", Договор);
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записать();
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;    
	
	Для Каждого ТекСтрокаВыполненныеРаботы Из ВыполненныеРаботы Цикл
		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Договор = Договор;
		Движение.КоличествоЧасов = ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту;
		Движение.СуммаКОплате = ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту * Договор.ВКМ_СтоимостьЧасаРаботы;
	КонецЦикла;  
	
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записать();    
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;    
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Договор КАК Договор,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Дата КАК Дата,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Специалист КАК Специалист,
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.ЧасыКОплатеКлиенту КАК ЧасыКОплатеКлиенту,
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот,
		|	ДоговорыКонтрагентов.ВКМ_СтоимостьЧасаРаботы КАК ВКМ_СтоимостьЧасаРаботы
		|ИЗ
		|	Документ.ВКМ_ОбслуживаниеКлиента.ВыполненныеРаботы КАК ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Дата, ) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
		|		ПО ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Специалист = ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка.Договор = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка = &Ссылка"; 
	
	Запрос.УстановитьПараметр("Дата", Дата);  
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если ЗначениеЗаполнено(Специалист) = Ложь Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Не выбран сотрудник");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если Выборка.ПроцентОтРабот = 0 ИЛИ Выборка.ПроцентОтРабот = NULL Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("У сотрудника %1 не установлен процент от работ в регистре сведений", Выборка.Специалист);
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
			
		Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
		Движение.Период = Выборка.Дата;
		Движение.Сотрудник = Выборка.Специалист;
		Движение.ЧасовКОплате = Выборка.ЧасыКОплатеКлиенту;
		Движение.СуммаКОплате = Выборка.ЧасыКОплатеКлиенту * Выборка.ВКМ_СтоимостьЧасаРаботы * Выборка.ПроцентОтРабот / 100;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения) 
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
		"ДатаПроведенияРабот, ВремяНачалаРабот, Специалист"); 
	
	Если РеквизитыОбъекта.ДатаПроведенияРабот <> ДатаПроведенияРабот
		Или РеквизитыОбъекта.ВремяНачалаРабот <> ВремяНачалаРабот
		Или РеквизитыОбъекта.Специалист <> Специалист Тогда 
		ЗаказИзменен = Истина;
	Иначе
		ЗаказИзменен = Ложь;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("ЗаказИзменен", ЗаказИзменен);
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

КонецПроцедуры

Процедура ПриЗаписи(Отказ) 
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ДополнительныеСвойства.ЭтоНовый Тогда

		Сообщение = СтрШаблон("Новый заказ № %1, исполнитель: %2, дата %3",
			Номер, Специалист, Формат(ДатаПроведенияРабот, "ДЛФ=D"));
		ДокОбъект = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		ДокОбъект.ТекстСообщения = Сообщение;
		ДокОбъект.Записать();

	ИначеЕсли ДополнительныеСвойства.ЗаказИзменен Тогда

		Сообщение = СтрШаблон("Заказ № %1 изменен, исполнитель: %2, дата %3",
			Номер, Специалист, Формат(ДатаПроведенияРабот, "ДЛФ=D"));
		ДокОбъект = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		ДокОбъект.ТекстСообщения = Сообщение;
		ДокОбъект.Записать();

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли







